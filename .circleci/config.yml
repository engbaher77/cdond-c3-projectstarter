version: 2.1

commands:
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here     
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         command: |
  #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #           SUCCESS = 1
  #           if(( $SUCCESS==1 )); 
  #           then
  #           #  cd ~/project/backend
  #           #  npm install
  #           #  Add revert code here. You can find this in the Getting Started section.
  #             exit 1
  #           fi
            
jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install 
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install 
             npm run test
            
  scan-frontend:

    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            npm install --save-dev ts-loader@9.4.2
            npm update mkdirp --depth 2
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1

      - run:
          name: Touch Inventory file 
          command: |
            echo [web] > ~/inventory

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --region us-east-1 \
            --output text >> ~/inventory

      - persist_to_workspace:
          root: ~/
          paths: 
            - inventory

      - destroy_environment

  configure-infrastructure:
    docker:
      # - image: python:3.7-alpine3.11
      - image: python:3.9.16
    
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6b:7d:b7:2c:5b:49:34:cb:34:ab:93:36:47:19:2b:73"
      - run:
          name: Install dependenciess
          command: |
            # apk add --update ansible 
            python3 --version
            apt-get update -y
            apt install ansible -y
            which ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat ./inventory
            ansible-playbook -i inventory configure-server.yml
            # ansible-playbook -i ~/inventory main4.yml --private-key udacity-user.pem   
 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              # Run and save the migration output
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                  curl https://kvdb.io/KZwn6tEXsBaoKtzSGCtizU/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update -y
            sudo apt search awscli
            sudo apt install awscli -y

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP="54.208.147.217"
            # export BACKEND_IP=$(aws ec2 describe-instances...............)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-c405f1e --recursive
            # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.9.16
    
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6b:7d:b7:2c:5b:49:34:cb:34:ab:93:36:47:19:2b:73"
      - run:
          name: Install dependenciess
          command: |
            python3 --version
            apt-get update -y
            apt install ansible -y
            which ansible
      - run:
          name: Deploy-Backend
          command: |
            echo "Contents  of the inventory.txt file is --------"
            cd .circleci/ansible
            cat inventory
            ansible-playbook -i inventory deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              apt-get install curl
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      - run:
          name: Backend smoke test.
          command: |
              # Fetch and prepare the BACKEND_IP env var
              export API_URL="http://54.208.147.217:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 0
              fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-c405f1e.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 1
              else
                return 1
              fi
      # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      # - configure-infrastructure:
          # requires: [deploy-infrastructure]
      # - run-migrations:
          # requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      - smoke-test
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]